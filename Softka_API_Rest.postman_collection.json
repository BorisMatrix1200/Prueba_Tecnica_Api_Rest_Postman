{
	"info": {
		"_postman_id": "4ca2f6ce-6ee4-4588-b44b-551126457a43",
		"name": "Softka_API_Rest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46916340",
		"_collection_link": "https://borisandresvelezchanci.postman.co/workspace/Boris-Andres-Velez-Chanci's-Wor~74913d03-b3bb-427a-83ba-59a663e2124b/collection/46916340-4ca2f6ce-6ee4-4588-b44b-551126457a43?action=share&source=collection_link&creator=46916340"
	},
	"item": [
		{
			"name": "Registro Usuario Existente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has a valid schema\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('errorMessage').that.is.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Error message should be an empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.errorMessage).to.exist.and.to.equal(\"\", \"Error message should be an empty string\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"Boris Andres\",\r\n  \"password\": \"Password2025+\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.demoblaze.com/signup",
					"protocol": "https",
					"host": [
						"api",
						"demoblaze",
						"com"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro Usuario Nuevo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.be.empty; // Since the response is an empty string, we expect it to be empty.\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has a valid JSON format\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"    pm.expect(() => JSON.parse(pm.response.text())).to.not.throw();\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response adheres to the expected schema\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.be.empty; // Since the response is an empty string, it should be an empty object.\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar un username aleatorio, por ejemplo \"user\" + 4 dígitos aleatorios\r",
							"const randomUser = \"user\" + Math.floor(Math.random() * 10000);\r",
							"\r",
							"// Guardar en variable global\r",
							"pm.globals.set(\"randomUser\", randomUser);\r",
							"\r",
							"// Mostrar en consola para debug\r",
							"console.log(\"Usuario generado:\", randomUser);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{randomUser}}\",\r\n  \"password\": \"Password2025+\"\r\n}\r\n\r\n//Se agrega en el pre request un username aleatorio, por ejemplo \"user\" + 4 dígitos aleatorios, y se alamacena en una variable global, luego se llama en el body.\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.demoblaze.com/signup",
					"protocol": "https",
					"host": [
						"api",
						"demoblaze",
						"com"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "LogIn Correcto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.status).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response is an empty string\", function () {\r",
							"    pm.expect(pm.response.text()).to.eql(\"\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response should be an empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"Boris Andres\",\r\n  \"password\": \"UGFzc3dvcmQyMDI1Kw==\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.demoblaze.com/login",
					"protocol": "https",
					"host": [
						"api",
						"demoblaze",
						"com"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "LogIn Incorrecto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response is in valid JSON format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response should contain the 'errorMessage' field\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('errorMessage');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Error message should be an empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.errorMessage).to.exist.and.to.equal(\"\", \"Error message should be an empty string\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"Boris Andres\",\r\n  \"password\": \"PasswordIncorrecto\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.demoblaze.com/login",
					"protocol": "https",
					"host": [
						"api",
						"demoblaze",
						"com"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		}
	]
}